Imports Microsoft.VisualBasic
Imports System
Imports System.Collections.Generic
Imports System.IO
Imports System.Linq
Imports System.Net
Imports System.Text
Imports System.Runtime.InteropServices






Namespace SmartComm
    Public Class SmsClient
        Private Shared _serviceUrl As Uri
        Private Shared _serviceEncoding As Encoding
        Private Shared _username As String = ""
        Private Shared _password As String = ""

        Private Shared Sub New()
            ServicePointManager.ServerCertificateValidationCallback = Function() True
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12
        End Sub

        Public Shared Sub Init(ByVal url As String, ByVal encoding As Encoding, ByVal username As String, ByVal password As String)
            _serviceUrl = New Uri(url)
            _serviceEncoding = encoding
            _username = username
            _password = password
        End Sub

        Public Shared Function SendMssage(ByVal mobileNo As String, ByVal message As String, ByVal scheduleTime As DateTime?, ByVal category As String, ByVal senderName As String, <Out> ByRef statusMessage As String, <Out> ByRef taskId As String) As Boolean
            statusMessage = ""
            taskId = ""
            Dim [option] As String = ""

            If category <> "" Then
                [option] += "SEND_TYPE=" & category
            End If

            If senderName <> "" Then
                [option] += ",SENDER=" & senderName
            End If

            Dim formData = New Dictionary(Of String, String)() From {
                {"ACCOUNT", _username},
                {"PASSWORD", _password},
                {"MOBILE", mobileNo},
                {"MESSAGE", message},
                {"OPTION", [option]}
            }

            If scheduleTime.HasValue Then
                formData.Add("SCHEDULE", scheduleTime.Value.ToString("yyyy-MM-dd HH:mm", System.Globalization.DateTimeFormatInfo.InvariantInfo))
            End If

            Dim url = New Uri(_serviceUrl, "SendMessage").AbsoluteUri
            Dim response As String = HttpPost(url, formData)
            If response.IndexOf("END=OK") = -1 Then Throw New Exception("Invalid Response: " & response)
            Dim lines = response.Trim().Split(vbLf)
            Dim status As String = ""

            For Each line In lines
                Dim datas = line.Split("="c)

                Select Case datas(0)
                    Case "STATUS"
                        status = datas(1)
                    Case "TASK_ID"
                        taskId = datas(1)
                    Case Else
                End Select
            Next

            statusMessage = GetStatusMessage(status)
            Return status = "0"
        End Function

        Private Shared Function HttpPost(ByVal url As String, ByVal formData As Dictionary(Of String, String), ByVal Optional timeout As TimeSpan? = Nothing) As String
            Dim req = TryCast(WebRequest.Create(url), HttpWebRequest)
            req.Method = "POST"
            req.ServicePoint.Expect100Continue = False
            req.KeepAlive = False

            If timeout.HasValue Then
                req.Timeout = CInt(timeout.Value.TotalMilliseconds)
            End If

            req.ContentType = "application/x-www-form-urlencoded"
            Dim postData As String = String.Join("&", formData.[Select](Function(x) x.Key & "=" & Uri.EscapeDataString(x.Value)))
            Dim reqData As Byte() = _serviceEncoding.GetBytes(postData)
            req.ContentLength = reqData.Length

            Using reqStream = req.GetRequestStream()
                reqStream.Write(reqData, 0, reqData.Length)
            End Using

            Using res = req.GetResponse()

                Using resStream = res.GetResponseStream()

                    Using sr = New StreamReader(resStream, _serviceEncoding)
                        Return sr.ReadToEnd()
                    End Using
                End Using
            End Using
        End Function

        Private Shared Function GetStatusMessage(ByVal status As String) As String
            Select Case status
                Case "0"
                    Return "Success"
                Case "500"
                    Return "Error=500: Service error."
                Case "501"
                    Return "Error=501: Missing parameter."
                Case "502"
                    Return "Error=502: Incorrect username or password."
                Case "503"
                    Return "Error=503: Invalid parameter."
                Case "504"
                    Return "Error=504: Insufficient balance."
                Case "505"
                    Return "Error=505: Invalid or block mobile number."
                Case "507"
                    Return "Error=507: Sender name not allowed."
                Case Else
                    Return "Unknown Error: " & status
            End Select
        End Function
    End Class
End Namespace